# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

list = [13, 4, 25, 40, 61, 4, 1, 76, 42, 43, 100]
new_list = [el for el in list if el > list[list.index(el) - 1]]
print(new_list)

# 3.Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.


print(
    f"Числа в пределах от 20 до 240, кратные 20 или 21: {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}")

# 4.Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.


numbers = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
unique_numbers = [el for el in numbers if numbers.count(el) < 2]
print(unique_numbers)

# 5.Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.


from functools import reduce

my_list = [el for el in range(100, 1001) if el % 2 == 0]

def my_func(prev_el, el):
    return prev_el * el

print(f'Список четных чисел от 100 до 1000: {my_list}')
print(f'Произведение всех элементов списка {reduce(my_func, my_list)}')

# 6.Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.



from itertools import count
for el in count(5):
    if el > 20:
        break
    else:
        print(el)

from itertools import cycle
cyc = 0
for el in cycle(list):
    if cyc > 15:
        break
    else:
        print(el)
        cyc += 1


#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!


from itertools import count
from math import factorial

def generator():
    for el in count(1):
        yield factorial(el)

gen = generator()
x = 0
for el in gen:
    if x < 15:
        print(el)
        x += 1
    else:
        break




